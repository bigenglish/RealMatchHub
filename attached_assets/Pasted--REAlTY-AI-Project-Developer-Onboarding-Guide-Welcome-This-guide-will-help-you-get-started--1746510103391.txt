# REAlTY.AI Project - Developer Onboarding Guide

## Welcome!

This guide will help you get started with the REAlTY.AI project, which aims to [**revolutionize real estate by providing users with AI-powered insights, personalized property recommendations, and seamless connections to real estate services.**] Your initial tasks will focus on code cleanup, vetting existing features, and suggesting potential enhancements.

## Project Access and Setup (Replit)

1.  **Accept Collaboration Invite:** You should have received an invitation to collaborate on the REAlTY.AI Replit project. Please accept it.
2.  **Explore the Replit Environment:**
    * Familiarize yourself with the Replit editor:
        * **File Explorer (Left Sidebar):** Navigate project files.
        * **Code Editor (Center):** View and edit code.
        * **Console (Bottom):** View server logs and output.
        * **Preview Window (Right):** See the running application.
    * Replit automatically saves your work.
3.  **Pinned Files:** The following key files are pinned in the file explorer for easy access:
    * `README.md`: This guide.
    * `routes.ts`: Backend API route definitions (Express.js).
    * `backend/idx-broker.ts`: Handles IDX Broker API interactions.
    * `backend/vertex-ai.ts`: Handles Vertex AI integration (Google Cloud).
    * `backend/schema.ts`: Defines the database schema and data models (drizzle-orm, zod).
    * `backend/storage.ts`: Defines data access logic (IStorage interface).
    * `frontend/src/components/IDXDataViewer.tsx` (or equivalent): Frontend component for displaying listings (likely React).
4.  **Running the Application:**
    * Click the green "Run" button in the Replit editor.
    * The backend server will start in the Console.
    * The frontend will be accessible in the Preview Window or the provided external URL.

## Project Overview

REAlTY.AI combines real estate functionality with cutting-edge AI. Key features include:

* **Property Listings:** Displaying properties from IDX Broker.
* **AI-Driven Insights:** Providing property price predictions, automated descriptions, and personalized recommendations.
* **Service Requests:** Facilitating connections with service providers (e.g., inspectors, mortgage brokers).
* **Chat:** Enabling real-time communication between users and agents.
* **Property Search:** Allowing users to search for properties based on various criteria, including AI-driven style analysis.

## Backend Implementation

The backend is built with Node.js and Express.js.

### Key Files and Structure

* `server.js` or `app.js`: Main server entry point.
* `routes.ts`: Defines all API routes and middleware.
* `backend/`: Contains backend logic, organized into modules:
    * `idx-broker.ts`: Handles IDX Broker API calls to fetch property listings.
    * `vertex-ai.ts`: Integrates with Google Cloud's Vertex AI for AI features like price prediction and description generation.
    * `schema.ts`: Defines database schema using `drizzle-orm` and data validation with `zod`.
    * `storage.ts`: Implements data access layer (`IStorage` interface) for interacting with the database.
    * `service-request-routes.ts`: Defines routes for creating, retrieving, and updating service requests.
    * `gemini-ai.ts`: Integrates with Gemini AI for tasks like explaining legal terms.
    * `google-places.ts`: Integrates with the Google Places API for location-based services.
    * `chat-service.ts`: Handles real-time chat functionality.
    * `ai-property-search.ts`: Implements AI-powered property search based on image analysis.
    * `ai-property-recommendations.ts`: Provides AI-driven property recommendations.

### Important Backend Technologies

* **Node.js & Express.js:** Backend runtime and framework.
* **TypeScript:** Strongly-typed JavaScript.
* **drizzle-orm:** ORM (Object-Relational Mapper) for PostgreSQL.
* **zod:** Schema declaration and validation library.
* **axios:** HTTP client for API requests (e.g., to IDX Broker).
* **Google Cloud Vertex AI, Gemini AI, Document AI, Vision API:** For AI and data processing.

### Important Routes and Functionality (routes.ts)

* `/api/idx/test`: Tests the connection to the IDX Broker API.
* `/api/idx/listings`: Fetches property listings from IDX Broker.
* `/api/properties`: CRUD (Create, Read, Update, Delete) operations for property data.
* `/api/ai/predict-price`: Predicts property prices using Vertex AI.
* `/api/ai/generate-description`: Generates property descriptions with AI.
* `/api/documents`: Handles document processing using Document AI (e.g., parsing property documents).
* `/api/places`: Integrates with the Google Places API for searching nearby places and getting place details.
* `/api/chat`: Handles chat-related functionality (e.g., creating conversations, sending messages).
* `/api/service-requests`: Manages service requests (e.g., scheduling appointments with service providers).
* `/api/ai/search`: Handles AI-powered property search.

### Data Model (backend/schema.ts)

The database schema is defined using `drizzle-orm`. Key tables include:

* `properties`: Stores property information (address, price, bedrooms, etc.).
* `marketTrends`: Stores data for analyzing real estate market trends (average price, sales volume, etc.).
* `serviceProviders`: Stores information about service providers (e.g., real estate agents, inspectors).
* `serviceExperts`: Stores information about individual experts providing services.
* `appointments`: Stores information about scheduled appointments.
* `chatConversations`: Stores data about chat conversations.
* `chatMessages`: Stores individual chat messages.

Data validation is performed using `zod` schemas (e.g., `insertPropertySchema`) to ensure data integrity.

### Data Access (backend/storage.ts)

The `IStorage` interface defines how the backend interacts with the database. Implementations of this interface provide methods for:

* `getProperties()`, `getProperty()`: Retrieving property data.
* `createProperty()`, `updateProperty()`, `deleteProperty()`: Managing property data.
* `getServiceProviders()`, `createServiceProvider()`: Managing service provider data.
* `getAppointmentsByUser()`, `getAppointmentsByExpert()`: Retrieving appointment data.
* [**Add other key data access methods, especially those related to chat, market trends, etc., if you want to highlight them.**]

## Frontend Implementation

The frontend is built using React.

* Key frontend files/directories:
    * `frontend/src/components/IDXDataViewer.tsx`: Displays IDX Broker listings.
    * `frontend/src/components/PropertyCard.tsx`: Displays individual property cards.
    * `frontend/src/pages/PropertyListings.tsx`: Page for displaying property listings.
    * `frontend/src/pages/PropertyDetails.tsx`: Page for displaying detailed property information.
    * `frontend/src/components/ChatInterface.tsx`: User interface for the chat functionality.
    * [**Add other key frontend files/directories, especially those related to AI features, service requests, etc.**]
* Frontend technologies:
    * React: JavaScript library for building user interfaces.
    * TypeScript: Strongly-typed JavaScript.
    * CSS Modules: For styling components.
    * Potentially other libraries for state management, routing, etc.

## Initial Developer Tasks

1.  **Familiarization:**
    * Carefully read this `README.md` to understand the project's goals, architecture, and technologies.
    * Explore the Replit environment and the pinned files.
    * Run the application to see it in action.

2.  **Code Review and Cleanup:**
    * **Goal:** Improve code quality and maintainability.
    * **Actions:**
        * Read the code in all key files, paying attention to code style, naming, comments, and error handling.
        * Identify areas for refactoring (simplification, modularization).
        * Add comments to explain complex logic, especially in AI-related code.
        * Ensure consistent formatting and coding conventions (e.g., using a code formatter).

3.  **Feature Vetting:**
    * **Goal:** Thoroughly test and verify the functionality of existing features.
    * **Actions:**
        * **IDX Broker Integration:**
            * Examine `backend/idx-broker.ts` and `/api/idx/listings` in `routes.ts`.
            * Verify that live listings are displayed correctly on the frontend (e.g., in `frontend/src/pages/PropertyListings.tsx` or `frontend/src/components/IDXDataViewer.tsx`).
            * **Specific Issue to Investigate:** [**"Investigate why only test data is showing and not live listings. Check API key configuration, API endpoints, and data mapping."**]
            * Check for errors in the browser's console and Replit backend console, paying attention to network requests and responses.
        * **AI Capabilities:**
            * Examine `backend/vertex-ai.ts` and relevant routes (e.g., `/api/ai/predict-price`, `/api/ai/generate-description`).
            * Test the frontend UI for AI features (e.g., property details page, search functionality).
            * **Specific Issue to Investigate:** [**"Evaluate the accuracy of property price predictions and explore ways to improve it. Also, check if property descriptions are being generated correctly and are relevant."**]
        * **Other Features:**
            * Test service request functionality (e.g., creating and managing requests, viewing expert availability).
            * Test Google Places API integration (e.g., searching for nearby places, displaying place details).
            * Test chat functionality (e.g., starting conversations, sending messages, real-time updates).
            * Document any bugs or unexpected behavior in a clear and concise manner.

4.  **Feature Suggestions and Improvements:**
    * **Goal:** Propose enhancements to existing features and suggest new features.
    * **Actions:**
        * Consider improvements to user experience (UI/UX), performance (optimization), AI accuracy (model tuning), IDX Broker integration (filtering, sorting), etc.
        * **Specific Suggestions (Examples):**
            * [**"Implement user authentication and authorization."**]
            * [**"Add filtering and sorting options to the property listings page."**]
            * [**"Improve the UI for displaying AI-generated property descriptions."**]
            * [**"Implement a map view for property listings."**]
            * [**"Add a feature to save favorite properties."**]
        * Document your suggestions with clear explanations of their benefits and potential implementation approaches. Provide code examples or UI mockups if possible.

## Communication and Collaboration

* Use the Replit chat to communicate questions, progress, and findings.
* Use Replit's branching and version control features for code management.
* Follow the established coding style and conventions (if any are defined; otherwise, suggest and implement consistent style).

## Next Steps

1.  Start by familiarizing yourself with the project and running the application.
2.  Begin reviewing the code in `routes.ts` and `backend/idx-broker.ts` (IDX Broker integration), as this is a core functionality.
3.  Document any questions or initial observations in a separate file or in the Replit chat.

## Contact

For questions or clarification, please contact: [**Your Name/Contact Information**]