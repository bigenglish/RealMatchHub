/api/communication/{propertyId}/{userId} (GET):

Purpose: Retrieve the communication log (messages) between the logged-in user (buyer or seller) and the relevant agent for a specific property.
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An array of message objects, each containing:
JSON

[
  {
    "senderId": "user123" or "agent456",
    "timestamp": "2025-04-24T10:00:00Z",
    "text": "Hi [Agent Name], I had a question about the disclosures.",
    "attachments": [
      {"name": "disclosure.pdf", "url": "/api/files/disclosure.pdf"}
    ]
  },
  {
    "senderId": "agent456",
    "timestamp": "2025-04-24T10:05:00Z",
    "text": "Hello [Buyer Name], happy to help. Which part are you referring to?",
    "attachments": []
  }
  // ... more messages
]
2. /api/showings/{propertyId}/{userId} (GET):

Purpose: Retrieve all showing information related to a specific property for the logged-in user.
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An object containing arrays for upcoming and past showings:
JSON

{
  "upcoming": [
    {
      "showingId": "show1",
      "date": "2025-04-26",
      "time": "14:00",
      "address": "[Property Address]",
      "status": "Scheduled",
      "agentName": "[Agent Name]"
    }
    // ... more upcoming showings
  ],
  "past": [
    {
      "showingId": "show2",
      "date": "2025-04-20",
      "time": "10:00",
      "address": "[Property Address]",
      "feedback": "Liked the layout, but the kitchen was smaller than expected."
    }
    // ... more past showings
  ]
}
3. /api/offers/{propertyId}/{userId} (GET):

Purpose: Retrieve all offer information related to a specific property for the logged-in user (both offers made by the user and offers received by the user, depending on their role).
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An array of offer objects:
JSON

[
  {
    "offerId": "offer1",
    "amount": 1200000,
    "status": "Accepted" or "Rejected" or "Pending" or "Countered",
    "submissionDate": "2025-04-23T18:00:00Z",
    "notes": "Contingent on inspection.",
    "expertReviewSummary": "Attorney reviewed and found standard terms." // Optional
  },
  {
    "offerId": "offer2",
    "amount": 1150000,
    "status": "Rejected",
    "submissionDate": "2025-04-22T10:00:00Z",
    "notes": "All cash offer."
  }
  // ... more offers
]
4. /api/documents/{propertyId}/{userId} (GET):

Purpose: Retrieve a list of all documents shared between the user and the agent for a specific property.
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An array of document objects:
JSON

[
  {
    "documentId": "doc1",
    "name": "Seller Disclosures",
    "type": "PDF",
    "url": "/api/files/seller_disclosures.pdf",
    "uploadDate": "2025-04-18T14:30:00Z",
    "uploadedBy": "agent456" or "user123"
  },
  {
    "documentId": "doc2",
    "name": "Inspection Report",
    "type": "PDF",
    "url": "/api/files/inspection_report.pdf",
    "uploadDate": "2025-04-22T09:00:00Z",
    "uploadedBy": "user123"
  }
  // ... more documents
]
5. /api/progress/{propertyId}/{userId} (GET):

Purpose: Retrieve the current progress summary for the buying/selling process of a specific property for the logged-in user.
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An object indicating the current stage and potentially detailed status:
JSON

{
  "currentStage": "Offer Accepted",
  "stages": [
    {"name": "Pre-Approval", "status": "Completed"},
    {"name": "Property Search", "status": "Completed"},
    {"name": "Showings", "status": "Completed"},
    {"name": "Offer Submission", "status": "Completed"},
    {"name": "Offer Accepted", "status": "Current"},
    {"name": "Inspection", "status": "Pending"},
    {"name": "Appraisal", "status": "Pending"},
    {"name": "Closing", "status": "Upcoming"}
  ]
}
6. /api/valuation/time/{propertyId}/{userId} (GET):

Purpose: Retrieve available times for property valuation (likely for sellers).
Path Parameters:
{propertyId}: The unique identifier of the property.
{userId}: The unique identifier of the logged-in user.
Response (JSON): An array of available time slots:
JSON

[
  {"date": "2025-04-29", "time": "10:00"},
  {"date": "2025-04-29", "time": "14:00"},
  {"date": "2025-04-30", "time": "11:00"}
  // ... more time slots
]
Notes for Replit Agent:

Ensure proper authentication and authorization are implemented for these endpoints to ensure users can only access data relevant to them and their properties.
Connect these endpoints to the Firebase database (or your chosen data storage) to retrieve and manage the necessary information.
Implement error handling for each endpoint to provide informative responses in case of issues.
Consider pagination for endpoints that might return a large amount of data (e.g., /api/communication, /api/documents).
The specific data structure within the JSON responses might need adjustments based on the exact data you are storing in your backend.