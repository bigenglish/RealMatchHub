Replit Agent, please implement the following code changes and configurations:

1. Install dotenv (for environment variables):

Bash

cd server
npm install dotenv
# OR
yarn add dotenv
2. Modify server/index.ts to load environment variables and use them:

Open server/index.ts.
Add the following lines at the very top of the file:
TypeScript

import dotenv from 'dotenv';
dotenv.config(); // Load environment variables from .env file (if you create one)
Replace any hardcoded API keys or sensitive configuration with process.env.YOUR_VARIABLE_NAME. For example, where you had the IDX Broker API key, it should now look something like:
TypeScript

const idxBrokerApiKey = process.env.IDX_BROKER_API_KEY;
const authorizationHeader = process.env.AUTHORIZATION_TOKEN;
// ... use idxBrokerApiKey and authorizationHeader in your requests
3. Create a .env file (in the server directory) and store your sensitive information there (for local development - remember Replit deployment uses environment variables set in the Secrets tab):

IDX_BROKER_API_KEY=your_idx_broker_api_key_here
AUTHORIZATION_TOKEN=your_authorization_token_here
# Add other sensitive variables here (e.g., database URLs, Firebase credentials if not using Replit Secrets)
Important: Ensure .env is added to your .gitignore file to prevent committing sensitive information to your repository.

4. Modify server/routes.ts to configure CSRF for production (adjust settings as needed):

Open server/routes.ts.
Locate your CSRF protection setup. Ensure it includes the secure: true option for production environments:
TypeScript

import csrf from 'csurf';
// ... your other imports

const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production', // Only set 'secure' in production
    sameSite: 'strict',
    path: '/',
  },
});
5. Add Error Handling Around Firebase Initialization (in your Firebase initialization file, likely imported in server/index.ts or a separate Firebase config file):

Open the file where you initialize Firebase Admin SDK.
Wrap the initialization code in a try...catch block:
TypeScript

import admin from 'firebase-admin';

try {
  const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_JSON || '{}');
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    // ... other Firebase config
  });
  console.log('[firebase-admin] Firebase Admin SDK initialized successfully');
} catch (error) {
  console.error('[firebase-admin] Error initializing Firebase Admin SDK:', error);
  // Potentially exit the process or handle the error appropriately
}
Important: For Replit deployment, configure your Firebase service account JSON as a Secret environment variable named FIREBASE_SERVICE_ACCOUNT_JSON.
6. Implement Basic Logging (in server/index.ts for example):

For now, let's add basic console.log statements for key events. You can upgrade to a more robust logging library later.
Ensure you are logging when the server starts, when routes are initialized, and any significant events.
7. Configure Basic CORS (in server/index.ts - adjust origin as needed for your frontend's deployed URL):

Install the cors middleware if you haven't already:
Bash

cd server
npm install cors
# OR
yarn add cors
In server/index.ts, add the following:
TypeScript

import cors from 'cors';
// ... your other imports

const app = express();

const corsOptions = {
  origin: 'https://your-replit-frontend-url.replit.app', // Replace with your actual frontend URL
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true, // If you need to handle cookies across origins
};

app.use(cors(corsOptions));
app.use(express.json());
// ... your other middleware and routes
8. Update .replit file (as before):

Ini, TOML

[deployment]
build = "npm run build" # Ensure you have a "build" script in package.json to compile TypeScript
run = "node dist/server/index.js" # Adjust path to your compiled JS file
localPort = 5000 # Or the port your app listens on
9. Ensure package.json has a build script (if using TypeScript):

JSON

"scripts": {
  "dev": "tsx server/index.ts",
  "build": "tsc",
  "start": "node dist/server/index.js" // You might use this directly in 'run'
}
After applying these changes, please redeploy the application. We can then monitor the logs for any further issues.